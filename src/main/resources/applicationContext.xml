<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans        
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    ">

	<context:component-scan base-package="com.jin.kafka"/>
	<tx:annotation-driven transaction-manager="txManager"/>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:druid.properties,classpath:hibernate.properties" />
	</bean>

	<bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<!--<property name="driverClassName" value="${jdbc.driverClassName}" /> -->
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间，单位是毫秒 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j2" />
	</bean>

	<bean id="mySessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="com.jin.kafka.db.entity" />
		<property name="hibernateProperties">
			<props>  
            <prop key="hibernate.dialect" >${hibernate.dialect}</prop>  
            <prop key="hibernate.show_sql" >${hibernate.show_sql}</prop>   
            <prop key="hibernate.hbm2ddl.auto" >${hibernate.hbm2ddl.auto}</prop>   
            <prop key="hibernate.jdbc.batch_size" >${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
	</bean>
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />

	<!-- 按类型拦截配置 -->
	<bean id="druid-type-proxyCreator"
		class="com.alibaba.druid.support.spring.stat.BeanTypeAutoProxyCreator">
		<!-- 所有ABCInterface的派生类被拦截监控 -->
		<property name="targetBeanType" value="com.jin.kafka.db.dao.DruidMarkInterface" />
		<property name="interceptorNames">
			<list>
				<value>druid-stat-interceptor</value>
			</list>
		</property>
	</bean>
	
	<!-- MyBatis config -->


	<!-- 方法名正则匹配拦截配置 -->
	<!-- <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" 
		scope="prototype"> <property name="patterns"> <list> <value>com.mycompany.service.*</value> 
		<value>com.mycompany.dao.*</value> </list> </property> </bean> <aop:config> 
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" 
		/> </aop:config> -->


	<!-- 按照BeanId来拦截配置 -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
		<property name="proxyTargetClass" value="true" /> <property name="beanNames"> 
		<list> <!- 这里配置需要拦截的bean id列表 -> <value>xxx-dao</value> <value>xxx-service</value> 
		</list> </property> <property name="interceptorNames"> <list> <value>druid-stat-interceptor</value> 
		</list> </property> </bean> -->
</beans>